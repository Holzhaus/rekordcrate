use std::env;
use std::fs::read_dir;
use std::fs::File;
use std::io::Write;
use std::path::Path;

fn main() {
    let out_dir = env::var("OUT_DIR").unwrap();
    let out_dir = Path::new(&out_dir);
    eprintln!("Writing tests to: {:?}", out_dir);
    write_pdb_tests(out_dir);
}

fn write_pdb_tests(output_path: &Path) {
    let output_filepath = output_path.join("tests_pdb.rs");
    let mut output_file = File::create(&output_filepath).unwrap();

    write!(
        output_file,
        r#"// THIS FILE IS AUTOGENERATED - DO NOT EDIT!
use rekordcrate::pdb::{{Header, RowGroup}};
"#
    )
    .unwrap();

    read_dir("./data/")
        .expect("Failed to read directory")
        .map(|x| {
            let path = x.unwrap();
            (path.file_name(), path.path())
        })
        .for_each(|(name, mut path)| {
            path.push("PIONEER");
            path.push("rekordbox");
            path.push("export");
            path.set_extension("pdb");
            eprintln!("Writing pdb test: {:?}", name);

            write!(
                output_file,
                include_str!("./tests/tests_pdb.rs.in"),
                name = name.to_str().unwrap(),
                filepath = path.canonicalize().unwrap().to_str().unwrap(),
            )
            .unwrap();
        });
}
