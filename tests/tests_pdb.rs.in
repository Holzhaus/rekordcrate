#[test]
#[allow(non_snake_case)]
fn pdb_{name}() {{
    println!("Parsing file: {filepath}");
    let data = include_bytes!("{filepath}").as_slice();
    let mut reader = Cursor::new(data);
    let header = Header::read(&mut reader).expect("failed to parse header");
    println!("{{:#?}}", header);

    for (i, table) in header.tables.iter().enumerate() {{
        println!("Table {{}}: {{:?}}", i, table.page_type);
        for page in header
            .read_pages(
                &mut reader,
                &ReadOptions::default(),
                (&table.first_page, &table.last_page),
            )
            .unwrap()
            .into_iter()
        {{
            let page_offset = header.page_offset(&page.page_index);
            println!("  {{:?}}", page);
            page.row_groups.iter().for_each(|row_group| {{
                println!("    {{:?}}", row_group);
                for &RowOffset(row_offset) in row_group.present_rows() {{
                    let abs_offset: u64 = page_offset
                        + u64::try_from(Page::HEADER_SIZE).unwrap()
                        + u64::from(row_offset);
                    reader
                        .seek(SeekFrom::Start(abs_offset))
                        .expect("failed to seek to row offset");
                    let row = Row::read_options(
                        &mut reader,
                        &ReadOptions::default(),
                        (page.page_type.clone(),),
                    )
                    .expect("failed to parse row");
                    println!("      {{:?}}", row);
                }}
            }})
        }}
    }}
}}
